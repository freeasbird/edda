syntax = "proto3";

package proto;

// cmd: protoc --go_out=plugins=grpc:. edda.core.proto

message Host {
    string machineid = 1; // 机器ID eg:f0f31005fb5a436d88e3c6cbf54e25aa
    string hypervisor = 2; // 主控 eg:kvm
    string architecture = 3; // 架构 eg:amd64
}

message Product {
    string name = 1; // 产品名 eg:Alibaba Cloud ECS
    string vendor = 2; // 供应商 eg:Alibaba Cloud
    string serial = 3; // 序列号 eg:5cfe47e7-1c9a-449c-afbe-xxxxxxxxx
}

// 主板
message Board {
    string name = 1; // 名称 eg:X10DRi
    string vendor = 2; // 供应商 eg:Supermicro
    string serial = 3; // 序列号 eg:NM177S504844
}

message Bios {
    string vendor = 1; // 供应商 eg:American Megatrends Inc.
}

message Cpu {
    string vendor = 1; // 供应商 eg:GenuineIntel
    string model = 2; // 型号 eg:Intel(R) Xeon(R) CPU E5-2682 v4 @ 2.50GHz
    uint32 speed = 3; // 频率 eg:2500
    uint32 cache = 4; // 缓存 eg:40960
    uint32 cpus = 5; // 个数 eg:2
    uint32 cores = 6; // 物理核心 eg:32
    uint32 threads = 7; // 核心 eg:64
}

message Mem {
    string type = 1; // 内存规格:DDR4
    uint32 speed = 2; // 频率 eg:2400
}

message Network {
    string driver = 1; // 设备类型 eg:virtio_net or igb or e1000
    string macaddress = 2; // mac地址 eg:00:0c:29:3b:26:xx
    uint32 speed = 3; // 速率 eg:1000
}

message Hardware {
    Host host = 1;
    Product product = 2;
    Board board = 3;
    Bios bios = 4;
    Cpu cpu = 5;
    Mem mem = 6;
    repeated Network networks = 7;
}

message Attrs {
    string name = 1; // 节点名
    string addr = 2; // 节点ip
    int64 start = 3; // 开始时间戳
    string hwmd5 = 4; // 硬件md5
    int64 now = 5; // 当前时间
}

message Node {
    Attrs attrs = 1;
    Hardware hardware = 2;
}

message SerialNum {
    string sid = 1;
    map<string, Node> nodes = 2;
    int64 date = 3;
}

message App {
    string name = 1;
    string key = 2;
    repeated Attr attrs = 3;
    int64 expire = 4;
    int64 instance = 5;
    int64 maxLifeCycle = 6;
}

message Attr {
    string name = 1;
    string key = 2;
    int64 value = 3;
}

message License {
    string lid = 1;
    string sid = 2;
    map<string, string> devices = 3;
    int64 generate = 4;
    int64 update = 5;
    int64 lifeCycle = 6;
    map<string, App> apps = 7;
}

message AuthReq {
    Cipher cipher = 1;
    map<string, App> apps = 3;
}

message AuthResp {
    Cipher cipher = 1;
    License lic = 2;
}

message UntiedReq {
    string app = 1;
    string id = 2;
}

message Clear {
    License lic = 1;
    Cipher cipher = 2;
    int64 date = 3;
}

message Cipher {
    string code = 1;
}

service Authorization {
    rpc Resolved (Cipher) returns (SerialNum); // 解析序列号
    rpc Authorized (AuthReq) returns (AuthResp); // 授权
    rpc Untied (UntiedReq) returns (Cipher); // 解绑
    rpc Cleared (Cipher) returns (Clear); // 清除
}



